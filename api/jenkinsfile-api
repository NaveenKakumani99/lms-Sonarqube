pipeline {
    agent {
        label 'lms-slavenode'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('yoursureshdockerhub')
        registry = "yoursureshdockerhub/lms-backend"
        registryCredential = 'yoursureshdockerhub'
        dockerImage = ''
    }

    stages {
        stage('Creating network') {
            steps {
                script {
                    def networkExists = sh(script: 'docker network ls -q -f name=lmsnetwork', returnStatus: true)
                    if (networkExists == 0) {
                        echo 'lmsnetwork already exists'
                    } else {
                        echo 'Creating lmsnetwork...'
                        sh 'docker network create lmsnetwork'
                    }
                }
            }
        }

        stage('building backend image') {
            steps {
                sh 'cd api && docker build -t yoursureshdockerhub/lms-backend .'
            }
        }

        stage('sonarqube code-checking') {
            steps {
                sh 'docker container run --rm -e SONAR_HOST_URL="http://4.213.1.174:9000" -e SONAR_LOGIN="sqp_13e1c7403efb97927cbaead0ac40974799e29cce" -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms-app'
            }
        }

        stage('docker login') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('pushing image') {
            steps {
                sh 'docker push yoursureshdockerhub/lms-backend'
            }
        }

        stage('Removing old-images') {
            steps {
                sh 'docker rmi -f yoursureshdockerhub/lms-backend'
            }
        }

        stage('running database image') {
            steps {
                sh 'docker container rm --force lmsdb'
                sh 'docker run -d -p 5432:5432 --network lmsnetwork -e POSTGRES_PASSWORD=password --name lmsdb postgres'
            }
        }

        stage('Running image(container)') {
            steps {
                sh 'docker container rm --force backend'
                sh 'docker run -d -p 8080:8080 --network lmsnetwork -e DATABASE_URL=postgresql://postgres:password@lmsdb:5432/postgres --name backend -e PORT=8080 -e MODE=local yoursureshdockerhub/lms-backend'
            }
        }
    }

    post {
        success {
            script {
                slackSend channel: 'jenkins', color: 'good', message: 'hi..CONGRATULATIONS!!! build succeeded', tokenCredentialId: '39bdd4ec-778b-421e-afa7-43e64c149c79'
                slackUploadFile channel: 'jenkins', credentialId: '39bdd4ec-778b-421e-afa7-43e64c149c79', filePath: 'api/jenkinsfile-api'
            }
        }
        failure {
            script {
                slackSend channel: 'jenkins', color: 'danger', message: 'hii...i am suresh check the job configurations build failed - Job failed', tokenCredentialId: '39bdd4ec-778b-421e-afa7-43e64c149c79'
            }
        }
    }
}

