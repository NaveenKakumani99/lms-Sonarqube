pipeline {
    agent {
      label 'lms-slave'
    }

    environment {

    DOCKERHUB_CREDENTIALS = credentials('dockerhubcredentials')
     registry = "naveen1016/lms-frontend"
        registryCredential = 'dockerhubcredentials'
        dockerImage = ''
    }

    stages {

         stage('pipeline status') {
            steps {
                script {
                    slackSend channel: 'jenkins-notifications',
                            color: '#ff8c00',
                            message: 'lms-Frontend Pipeline has been Started',
                            tokenCredentialId: 'jenkin-project'
                }
            }
        }
        

         stage('sonarqube analysis') {
            steps {
               
                sh 'docker container run --rm -e SONAR_HOST_URL="http://35.75.18.38:9000" -e SONAR_LOGIN="sqp_5552f71195d24db2bd3a3d4733c2fc932b3602b0" -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms'
            }
          
        }       

        stage('Building frontend image') {
            steps {
                sh 'cd webapp && docker build -t naveen1016/lms-frontend .'
            }
        }

        stage('docker-login') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('pushing image to dockerhub') {
            steps {
                  sh 'docker push naveen1016/lms-frontend'
            }
        }

        stage('Remove old images') {
             steps {
                 sh 'docker rmi -f naveen1016/lms-frontend'
            }
        }

         stage('Running container') {
            steps {
                  sh 'docker container rm --force f-end'
                  sh 'docker run -dt -p 8000:80 --name f-end naveen1016/lms-frontend'
            }
        }
    }

post {
success {
    script {
        slackSend(
            channel: 'jenkins-notifications',
            color: 'good',
            message: 'hi..CONGRATULATIONS Front-end job success !!! Front_end build succeeded Thanks...Suresh',
            tokenCredentialId: 'jenkin-project'
        )

        emailext body: 'lms frontend build success',
            recipientProviders: [developers()],
            subject: 'build successed',
            to: 'yoursureshb@gmail.com'
    }
}
    failure {
        script {
            slackSend(
                channel: 'jenkins-notifications',
                color: 'danger',
                message: 'Front-end job failed. Please check the build logs for more details. Thanks...Suresh',
                tokenCredentialId: 'jenkin-project'

            )
                emailext body: '''building lms application frontend job got failed check job configuration.
                
                ThankYou,
                Suresh''',
                recipientProviders: [buildUser()],
                subject: 'Build failed !! lms_frontend',
                to: 'menaveen1016@gmail.com'
        }
    }
}
}


      

