pipeline {
    agent {
      label 'lms-slave'
    }

    environment {

    DOCKERHUB_CREDENTIALS = credentials('dockerhubcredentials')
     registry = "naveen1016/lms-frontend"
        registryCredential = 'dockerhubcredentials'
        dockerImage = ''
    }

    stages {

         stage('pipeline status') {
            steps {
                script {
                    slackSend channel: 'jenkins-notifications', color: '#ffff00' , message: "slackSend 'frontend pipeline has been started waiting for approval ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)'"
                }
            }
        }

  stage('Approval') {
            steps {
                 script{
                timeout(time: 5,unit: "MINUTES"){
                slackSend channel: ' team-updates', message: "slackSend 'started ${env.JOB_NAME}  (http://35.77.2.55:8080/job/myjenkinspipeline2/${env.BUILD_NUMBER}/console)'", teamDomain: 'jenkinspipeline-group', tokenCredentialId: 'slacknew'
                input message:'Approve to Deploy',ok: 'Yes'
                    }
                    }
            }
         }

         stage('sonarqube analysis') {
            steps {
               
                sh 'docker container run --rm -e SONAR_HOST_URL="http://35.77.2.55:9000" -e SONAR_LOGIN="sqp_5552f71195d24db2bd3a3d4733c2fc932b3602b0" -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms'
            }
          
        }       

        stage('Building frontend image') {
            steps {
                sh 'cd webapp && docker build -t naveen1016/lms-frontend .'
            }
        }
        stage('Release LMS') {
            steps {
                script {
                    echo "Releasing.."       
                    def packageJSON = readJSON file: 'webapp/package.json'
                    def packageJSONVersion = packageJSON.version
                    echo "${packageJSONVersion}"  
                    sh "zip webapp/dist-${packageJSONVersion}.zip -r webapp/dist"
                    sh "curl -v -u admin:admin1 --upload-file webapp/dist-0.0.0.zip http://43.207.234.67:8081/repository/lmsapplication/"     
            }
            }
        }
        stage('docker-login') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('pushing image to dockerhub') {
            steps {
                  sh 'docker push naveen1016/lms-frontend'
            }
        }

        stage('Remove old images') {
             steps {
                 sh 'docker rmi -f naveen1016/lms-frontend'
            }
        }

         stage('Running container') {
            steps {
                  sh 'docker container rm --force f-end'
                  sh 'docker run -dt -p 8000:80 --name f-end naveen1016/lms-frontend'
            }
        }
    }

post {
success {
    script {
        slackSend(
            channel: 'jenkins-notifications',
            color: 'good',
            message: 'hi..CONGRATULATIONS Front-end job success !!! Front_end build succeeded Thanks...Suresh',
            tokenCredentialId: 'jenkin-project'
        )

        emailext body: 'building lms application frontend job got success check browser with your ip or domain name.  thankyou naveen',
            recipientProviders: [developers()],
            subject: 'build successed',
            to: 'menaveen1016@gmail.com'
    }
}
    failure {
        script {
            slackSend(
                channel: 'jenkins-notifications',
                color: 'danger',
                message: 'Front-end job failed. Please check the build logs for more details. Thanks...Suresh',
                tokenCredentialId: 'jenkin-project'

            )
            emailext body: 'building lms application frontend job got failed check job configuration.',
            recipientProviders: [developers()],
            subject: 'build failed',
            to: 'menaveen1016@gmail.com'
        }
    }
}
}


      

